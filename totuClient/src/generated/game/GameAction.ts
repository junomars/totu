// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v3.21.7
// source: game/GameAction.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ActionData } from "./ActionData";
import { ActionType, actionTypeFromJSON, actionTypeToJSON } from "./ActionType";

export const protobufPackage = "space.junodev.model.game";

export interface GameAction {
  type: ActionType;
  data: ActionData | undefined;
}

function createBaseGameAction(): GameAction {
  return { type: 0, data: undefined };
}

export const GameAction = {
  encode(message: GameAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.data !== undefined) {
      ActionData.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.data = ActionData.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameAction {
    return {
      type: isSet(object.type) ? actionTypeFromJSON(object.type) : 0,
      data: isSet(object.data) ? ActionData.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: GameAction): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = actionTypeToJSON(message.type);
    }
    if (message.data !== undefined) {
      obj.data = ActionData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameAction>, I>>(base?: I): GameAction {
    return GameAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameAction>, I>>(object: I): GameAction {
    const message = createBaseGameAction();
    message.type = object.type ?? 0;
    message.data = (object.data !== undefined && object.data !== null)
      ? ActionData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
