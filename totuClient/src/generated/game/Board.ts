// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v3.21.7
// source: game/Board.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { Route } from "./Route";
import { Site } from "./Site";

export const protobufPackage = "space.junodev.model.game";

export interface Board {
  sites: Site[];
  routes: Route[];
}

function createBaseBoard(): Board {
  return { sites: [], routes: [] };
}

export const Board = {
  encode(message: Board, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.sites) {
      Site.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.routes) {
      Route.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Board {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBoard();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sites.push(Site.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.routes.push(Route.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Board {
    return {
      sites: globalThis.Array.isArray(object?.sites) ? object.sites.map((e: any) => Site.fromJSON(e)) : [],
      routes: globalThis.Array.isArray(object?.routes) ? object.routes.map((e: any) => Route.fromJSON(e)) : [],
    };
  },

  toJSON(message: Board): unknown {
    const obj: any = {};
    if (message.sites?.length) {
      obj.sites = message.sites.map((e) => Site.toJSON(e));
    }
    if (message.routes?.length) {
      obj.routes = message.routes.map((e) => Route.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Board>, I>>(base?: I): Board {
    return Board.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Board>, I>>(object: I): Board {
    const message = createBaseBoard();
    message.sites = object.sites?.map((e) => Site.fromPartial(e)) || [];
    message.routes = object.routes?.map((e) => Route.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };
