// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v3.21.7
// source: message/GameMessagePayload.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { CreateGamePayload } from "./payloads/CreateGamePayload";
import { GameCreatedPayload } from "./payloads/GameCreatedPayload";
import { LogPayload } from "./payloads/LogPayload";

export const protobufPackage = "space.junodev.model.message";

export interface GameMessagePayload {
  logMessage?: LogPayload | undefined;
  createGameRequest?: CreateGamePayload | undefined;
  gameCreatedResponse?: GameCreatedPayload | undefined;
}

function createBaseGameMessagePayload(): GameMessagePayload {
  return { logMessage: undefined, createGameRequest: undefined, gameCreatedResponse: undefined };
}

export const GameMessagePayload = {
  encode(message: GameMessagePayload, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.logMessage !== undefined) {
      LogPayload.encode(message.logMessage, writer.uint32(10).fork()).ldelim();
    }
    if (message.createGameRequest !== undefined) {
      CreateGamePayload.encode(message.createGameRequest, writer.uint32(18).fork()).ldelim();
    }
    if (message.gameCreatedResponse !== undefined) {
      GameCreatedPayload.encode(message.gameCreatedResponse, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GameMessagePayload {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameMessagePayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.logMessage = LogPayload.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createGameRequest = CreateGamePayload.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.gameCreatedResponse = GameCreatedPayload.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameMessagePayload {
    return {
      logMessage: isSet(object.logMessage) ? LogPayload.fromJSON(object.logMessage) : undefined,
      createGameRequest: isSet(object.createGameRequest)
        ? CreateGamePayload.fromJSON(object.createGameRequest)
        : undefined,
      gameCreatedResponse: isSet(object.gameCreatedResponse)
        ? GameCreatedPayload.fromJSON(object.gameCreatedResponse)
        : undefined,
    };
  },

  toJSON(message: GameMessagePayload): unknown {
    const obj: any = {};
    if (message.logMessage !== undefined) {
      obj.logMessage = LogPayload.toJSON(message.logMessage);
    }
    if (message.createGameRequest !== undefined) {
      obj.createGameRequest = CreateGamePayload.toJSON(message.createGameRequest);
    }
    if (message.gameCreatedResponse !== undefined) {
      obj.gameCreatedResponse = GameCreatedPayload.toJSON(message.gameCreatedResponse);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameMessagePayload>, I>>(base?: I): GameMessagePayload {
    return GameMessagePayload.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameMessagePayload>, I>>(object: I): GameMessagePayload {
    const message = createBaseGameMessagePayload();
    message.logMessage = (object.logMessage !== undefined && object.logMessage !== null)
      ? LogPayload.fromPartial(object.logMessage)
      : undefined;
    message.createGameRequest = (object.createGameRequest !== undefined && object.createGameRequest !== null)
      ? CreateGamePayload.fromPartial(object.createGameRequest)
      : undefined;
    message.gameCreatedResponse = (object.gameCreatedResponse !== undefined && object.gameCreatedResponse !== null)
      ? GameCreatedPayload.fromPartial(object.gameCreatedResponse)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
