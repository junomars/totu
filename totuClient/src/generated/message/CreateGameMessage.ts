// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v3.21.7
// source: message/CreateGameRequest.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { GameOrientation, gameOrientationFromJSON, gameOrientationToJSON } from "../game/GameOrientation";

export const protobufPackage = "space.junodev.model.message";

export interface CreateGameMessage {
  playerName: string;
  map: string;
  playerCount: number;
  gameOrientation: GameOrientation;
}

function createBaseCreateGameMessage(): CreateGameMessage {
  return { playerName: "", map: "", playerCount: 0, gameOrientation: 0 };
}

export const CreateGameMessage = {
  encode(message: CreateGameMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.playerName !== "") {
      writer.uint32(10).string(message.playerName);
    }
    if (message.map !== "") {
      writer.uint32(18).string(message.map);
    }
    if (message.playerCount !== 0) {
      writer.uint32(24).int32(message.playerCount);
    }
    if (message.gameOrientation !== 0) {
      writer.uint32(32).int32(message.gameOrientation);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateGameMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateGameMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.playerName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.map = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.playerCount = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.gameOrientation = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateGameMessage {
    return {
      playerName: isSet(object.playerName) ? globalThis.String(object.playerName) : "",
      map: isSet(object.map) ? globalThis.String(object.map) : "",
      playerCount: isSet(object.playerCount) ? globalThis.Number(object.playerCount) : 0,
      gameOrientation: isSet(object.gameOrientation) ? gameOrientationFromJSON(object.gameOrientation) : 0,
    };
  },

  toJSON(message: CreateGameMessage): unknown {
    const obj: any = {};
    if (message.playerName !== "") {
      obj.playerName = message.playerName;
    }
    if (message.map !== "") {
      obj.map = message.map;
    }
    if (message.playerCount !== 0) {
      obj.playerCount = Math.round(message.playerCount);
    }
    if (message.gameOrientation !== 0) {
      obj.gameOrientation = gameOrientationToJSON(message.gameOrientation);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateGameMessage>, I>>(base?: I): CreateGameMessage {
    return CreateGameMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateGameMessage>, I>>(object: I): CreateGameMessage {
    const message = createBaseCreateGameMessage();
    message.playerName = object.playerName ?? "";
    message.map = object.map ?? "";
    message.playerCount = object.playerCount ?? 0;
    message.gameOrientation = object.gameOrientation ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
