// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v3.21.12
// source: message/GameMessage.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { CreateGameRequest } from "./CreateGameRequest";
import { GameMessageType, gameMessageTypeFromJSON, gameMessageTypeToJSON } from "./GameMessageType";
import { LogPayload } from "./LogPayload";

export const protobufPackage = "space.junodev.model.message";

export interface GameMessage {
  gameMessageType: GameMessageType;
  logPayload?: LogPayload | undefined;
  createGameRequest?: CreateGameRequest | undefined;
}

function createBaseGameMessage(): GameMessage {
  return { gameMessageType: 0, logPayload: undefined, createGameRequest: undefined };
}

export const GameMessage = {
  encode(message: GameMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gameMessageType !== 0) {
      writer.uint32(8).int32(message.gameMessageType);
    }
    if (message.logPayload !== undefined) {
      LogPayload.encode(message.logPayload, writer.uint32(18).fork()).join();
    }
    if (message.createGameRequest !== undefined) {
      CreateGameRequest.encode(message.createGameRequest, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.gameMessageType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.logPayload = LogPayload.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createGameRequest = CreateGameRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameMessage {
    return {
      gameMessageType: isSet(object.gameMessageType) ? gameMessageTypeFromJSON(object.gameMessageType) : 0,
      logPayload: isSet(object.logPayload) ? LogPayload.fromJSON(object.logPayload) : undefined,
      createGameRequest: isSet(object.createGameRequest)
        ? CreateGameRequest.fromJSON(object.createGameRequest)
        : undefined,
    };
  },

  toJSON(message: GameMessage): unknown {
    const obj: any = {};
    if (message.gameMessageType !== 0) {
      obj.gameMessageType = gameMessageTypeToJSON(message.gameMessageType);
    }
    if (message.logPayload !== undefined) {
      obj.logPayload = LogPayload.toJSON(message.logPayload);
    }
    if (message.createGameRequest !== undefined) {
      obj.createGameRequest = CreateGameRequest.toJSON(message.createGameRequest);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameMessage>, I>>(base?: I): GameMessage {
    return GameMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameMessage>, I>>(object: I): GameMessage {
    const message = createBaseGameMessage();
    message.gameMessageType = object.gameMessageType ?? 0;
    message.logPayload = (object.logPayload !== undefined && object.logPayload !== null)
      ? LogPayload.fromPartial(object.logPayload)
      : undefined;
    message.createGameRequest = (object.createGameRequest !== undefined && object.createGameRequest !== null)
      ? CreateGameRequest.fromPartial(object.createGameRequest)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
