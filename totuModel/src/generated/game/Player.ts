// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v3.21.12
// source: game/Player.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Card } from "./Card";

export const protobufPackage = "space.junodev.model.game";

export interface Player {
  id: string;
  name: string;
  power: number;
  influence: number;
  deck: Card[];
  hand: Card[];
  play: Card[];
  discard: Card[];
  innerCircle: Card[];
  tokens: number;
}

function createBasePlayer(): Player {
  return {
    id: "",
    name: "",
    power: 0,
    influence: 0,
    deck: [],
    hand: [],
    play: [],
    discard: [],
    innerCircle: [],
    tokens: 0,
  };
}

export const Player = {
  encode(message: Player, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.power !== 0) {
      writer.uint32(24).int32(message.power);
    }
    if (message.influence !== 0) {
      writer.uint32(32).int32(message.influence);
    }
    for (const v of message.deck) {
      Card.encode(v!, writer.uint32(42).fork()).join();
    }
    for (const v of message.hand) {
      Card.encode(v!, writer.uint32(50).fork()).join();
    }
    for (const v of message.play) {
      Card.encode(v!, writer.uint32(58).fork()).join();
    }
    for (const v of message.discard) {
      Card.encode(v!, writer.uint32(66).fork()).join();
    }
    for (const v of message.innerCircle) {
      Card.encode(v!, writer.uint32(74).fork()).join();
    }
    if (message.tokens !== 0) {
      writer.uint32(80).int32(message.tokens);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Player {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.power = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.influence = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.deck.push(Card.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.hand.push(Card.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.play.push(Card.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.discard.push(Card.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.innerCircle.push(Card.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.tokens = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Player {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      power: isSet(object.power) ? globalThis.Number(object.power) : 0,
      influence: isSet(object.influence) ? globalThis.Number(object.influence) : 0,
      deck: globalThis.Array.isArray(object?.deck) ? object.deck.map((e: any) => Card.fromJSON(e)) : [],
      hand: globalThis.Array.isArray(object?.hand) ? object.hand.map((e: any) => Card.fromJSON(e)) : [],
      play: globalThis.Array.isArray(object?.play) ? object.play.map((e: any) => Card.fromJSON(e)) : [],
      discard: globalThis.Array.isArray(object?.discard) ? object.discard.map((e: any) => Card.fromJSON(e)) : [],
      innerCircle: globalThis.Array.isArray(object?.innerCircle)
        ? object.innerCircle.map((e: any) => Card.fromJSON(e))
        : [],
      tokens: isSet(object.tokens) ? globalThis.Number(object.tokens) : 0,
    };
  },

  toJSON(message: Player): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.power !== 0) {
      obj.power = Math.round(message.power);
    }
    if (message.influence !== 0) {
      obj.influence = Math.round(message.influence);
    }
    if (message.deck?.length) {
      obj.deck = message.deck.map((e) => Card.toJSON(e));
    }
    if (message.hand?.length) {
      obj.hand = message.hand.map((e) => Card.toJSON(e));
    }
    if (message.play?.length) {
      obj.play = message.play.map((e) => Card.toJSON(e));
    }
    if (message.discard?.length) {
      obj.discard = message.discard.map((e) => Card.toJSON(e));
    }
    if (message.innerCircle?.length) {
      obj.innerCircle = message.innerCircle.map((e) => Card.toJSON(e));
    }
    if (message.tokens !== 0) {
      obj.tokens = Math.round(message.tokens);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Player>, I>>(base?: I): Player {
    return Player.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Player>, I>>(object: I): Player {
    const message = createBasePlayer();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.power = object.power ?? 0;
    message.influence = object.influence ?? 0;
    message.deck = object.deck?.map((e) => Card.fromPartial(e)) || [];
    message.hand = object.hand?.map((e) => Card.fromPartial(e)) || [];
    message.play = object.play?.map((e) => Card.fromPartial(e)) || [];
    message.discard = object.discard?.map((e) => Card.fromPartial(e)) || [];
    message.innerCircle = object.innerCircle?.map((e) => Card.fromPartial(e)) || [];
    message.tokens = object.tokens ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
